### python编程技巧
1. try finally 一般用于释放外部资源之类的场景（文件或者网络连接）
2. 现在想来有点理解对象的含义了，之前像string类型的函数调用也有了概念，'xxx'作为一个string类的实例化对象，其自然可以调用string类的函数，可能其中的参数就是这个string的包含的内容，并不是空的，这一块理解还不是很透彻
3. 命令行下运行python解释器的时候，也是已当前目录为依据的，因此能够import当前目录下的文件
4. 关于Collections模块：其提供了一些数据结构  
	（1）Counter：dict的子类，其实就是一个字典，如果将hashable对象导入其中，hashable对象的元素为字典的键，其计数为字典的值  
	（2）defaultdict：dict的子类，其第一个参数能够为字典设定默认的值数据类型  
5. 关于python迭代器：需要支持两种方法，__iter__返回自身，__next__返回迭代器的下一个值，如果没有下一个值可以返回，那么应该抛出StopIteration异常。迭代器一般有两个基本参数，低值和高值。
6. 关于python生成器：生成器用于更简单地创建一个迭代器，用yield语句来进行创建，生成器可以节约内存（虽然我并不知道原理如何，感觉上生成器和迭代器实现的是同一种功能，只不过生成器不用一次加载所有数据，每次都返回要用的数据，这样可能就比较节约内存，但是我现在根本就用不上）
7. 关于python生成器表达式：一个简单的生成器表达式的例子  
	```
	sum(x*x for x in range(1, 10))
	```
8. 关于闭包：由另外一个函数返回的函数，也就是嵌套在里面的那个函数（暂时搞不明白是干嘛用的）  
	```
	def add_number(num):  
		def adder(number):  
			return num + number  
		return adder  
	>>> a_10 = add_number(10)  
	>>> a_10(21)  
	31   
	```
9. 关于装饰器：用来给一些对象添加新的行为
10. 关于unittest的使用，主要有两个点：  
	（1）unittest.main的作用

	>unittest.main():使用她可以方便的将一个单元测试模块变为可直接运行的测试脚本，main()方法使用TestLoader类来搜索所有包含在该模块中以“test”命名开头的测试方法，并自动执行他们。执行方法的默认顺序是：根据ASCII码的顺序加载测试用例，数字与字母的顺序为：0-9，A-Z，a-z。所以以A开头的测试用例方法会优先执行，以a开头会后执行。 

	（2）unittest.TestCase的作用
	用来定义其子类*（定义子类有什么好处？是能够使用父类的方法么？这里还没有搞懂）*
11. 关于项目结构
	（1）模块当中需要一个__init__.py文件
	（2）项目中需要一个MANIFEST.in文件，用来在使用sdist命令时找出将成为项目源代码一部分的所有文件
	（3）项目中需要一个setup.py，用来创建源代码压缩包或安装软件
12. 关于\*的使用：\*后面一般是一个不定参数的列表*（目前的理解，首次出现与字符串转换为图片拿到题目）*

### python PEP8 代码风格指南
1. 代码排版  
	（1）缩进：续行与被包裹元素保持垂直对其，后者放在隐线内，或者使用悬挂缩进，适用于函数、if语句等  
	（2）制表符还是空格：空格缩进是首选  
	（3）每行最长长度：限制为79个字符，换行首选方式是在括号内隐式换行，优势可以使用反斜杠换行  
	（4）空行：顶级函数和类定义上下使用两个空行分隔，类内的方法定义使用一个空行分隔  
	（5）源文件编码：使用utf-8
	（6）导入包：import模块应该独立一行
2. 字符串引号  
	（1）选择一种引号并坚持使用，同时出现时选择另一种来包裹字符串，而不是通过反斜杠来转义  
3. 表达式和语句中的空格  
	（1）不能忍受的情况：与括号保持紧凑，与后面的逗号、分号、冒号保持紧凑
	（2）其他建议：总是在二元操作符的两侧加入一个空格
4. 注释：用英文写注释，如果英文是一个短语或语句，第一个单词应该大写，每个句子应该由句点结束，句点后面还应该加两个空格。# 后面还需要加一个空格。
5. 命名约定  
	（1）覆盖原则：API里对用户可见的公共部分应该遵循约定  
	（2）命名规定：模块名包名应该短全小写，函数名方法名应该小写可以采用下划线，常量应该大写  
6. 还有一些，暂时用不着就先不写了

### 遇到的问题
1. 运行的时候反馈冒号那里有语法错误，导致的原因是上一个括号没有关闭
2. mac下系统自带的vim版本过低，需要进行升级  
	解决方法：brew install vim --with-lua --with-override-system-vi  
	这里有两个疑问  
	（1）为什么不用brew upgrade？  
	（2）为什么要安装lua环境
3. 如何用阿里云DMS连接阿里云ECS上的自建数据库？主要遇到了三大困难：  
	（1）ECS上自带安全组管理，会对一些ip进行过滤，并且屏蔽了很多端口。  
	解决方式：新增一组安全组规则，将mysql的3306端口纳入允许的端口中，并且不限访问ip  
	（2）ubuntu自带的防火墙（又感觉是mysql自己的限制）限制外部ip对于3306端口的访问，好像这个是根据linux版本的不同有所不同的，可能是两个都要改  
	解决方式：对于防火墙（没有遇到防火墙的问题，而且当前系统找不到配置文件，之后肯定是要接触的）修改系统目录下的防火墙配置文件，增加3306端口的开放，对于mysql自带的限制，配置mysql的配置文件，删除其中限制为本地ip的配置  
	思考：以后绝对不能照搬命令，根据系统的不同，可能命令也会有所不同，之后对于命令还是多理解吧  
	（3）mysql自身对于远程连接的限制（上面那个配置文件的限制好像只限制了端口）  
	解决方式：这个好办，两种方法，其一是直接使用命令的方式修改权限，其二是修改mysql库下的user表下root用户的ip限制，自我感觉后面一个方法更加直观一些，两种方法所达到的结果都是表的更新  
4. 实验楼python课程的挑战，以下几个困难：  
	（1）子类方法的覆盖  
	解决方式：这个很简单，直接在子类当中重写该方法就行了，这个只是一个知识点  
	（2）类中默认参数的设置  
	解决方式：这个其实就是要创建一个类实例其所有参数都是要有的，难点在于如何添加默认参数（我直接在init里面添加提示我self没有默认值不允许在有默认值的参数前面），但是这个和主流程无关，就先不管了  
	（3）join方法的使用  
	解决方式：这个百度一下就知道了，join里面的是待插入的列表、元组或者字符串，join前面的是插入字符串  
	（4）将字典转换成字符串  
	这里为什么要这样做呢？主要是考虑到字典里面可能有些key是没有，强行取的话会报错，转换成字符串可以有什么取什么（我在学生成绩计算里面直接取了key，其实可以使用异常之类的东西去解决，简单的解决方式暂时还没有想到）  
	解决方式：遍历dict.items，将其插入一个列表，之后join生成一个字符串  
	（5）运行的时候报错没有这个文件  
	解决方式：百度了一下发现是文件的ff设置的是dos，直接在vim下修改set ff=unix就完事了  
	（6）失误太多，经常犯不该犯的错误，不仅浪费时间还浪费精力  
	解决方式：最重要的还是自身编码的时候要熟练、仔细，其次错误提示也是可以提升效率的，然后要掌握debug方法，最后要改进vim的使用技巧  
5. python设置命令行下能够自动补全命令和浏览历史命令  
	方法很简单，就是在home目录下增加一个.pythonrc，然后再新增一个.bashrc，设置python启动的时候加载.pythonrc，之后source一下.bashrc  
	遇到的问题就是设置完之后我的自动命令补全还是不能用，这个问题一直没有解决
6. MySQL成绩管理系统的挑战，遇到的问题主要有是如何理清复杂的子查询逻辑，本挑战涉及到三个表的关联  
	解决方式：  
	（1）厘清逻辑联系：要查询的数据全部来自于一个表，因此以这个表展开查询，之后的就是确定该表的一个关键字段，运用子查询来做，子查询里面还嵌套了一层子查询。对于这种十分复杂的题目，一定要先厘清逻辑再下手，不然中间思路会断掉，而且还浪费精力  
	（2）查询语句的结构的分明：这里就发现了标准化书写的好处，以后对于复杂的查询语句一定要用标准化的书写，我现在的话还是尽量用阿里云的数据管理平台会比较好，暂时够用  
7. 在virtualenv下安装python模块一直安装到系统目录里面去
	解决方式：pip命令前不加sudo就行了
8. 遇到了虚拟环境下vim编辑脚本过程当中F5直接执行脚本出错，但是外部执行没问题的现象  
	解决方式：问题产生原因是vim无法识别当前是在虚拟环境下，会直接用系统的python版本，所以要么能让vim识别虚拟环境，要么就不要在vim一键执行
9. 在vim当中无法使用虚拟环境，以及使用virtualenv.vim无法切换虚拟环境，这两个问题一直没有得到解决



### MySQL操作技巧
1. 在原记录的基础上修改某条记录，可以直接 update talbe set x=x+k where ...
2. 关于用户变量：用户变量是在用于临时存储一个值以便于在之后引用它的

### vim操作技巧
1. 复制粘贴：先使用xdd复制x行，再按p进行粘贴
2. 保存只读文件：```:w !sudo tee %```
3. vim多行缩进技巧：点击v进入visual模式，然后选择多行，点击```>```进行缩进

### linux操作技巧
1. 寻找自己想要安装的包的名字：```apt-cache search [pkgname]```
2. 从源代码安装软件：  
	（1）阅读安装引导  
	（2）进行配置```./configure```  
	（3）编译源文件```make```  
	（4）安装```sudo make install```  
3. Linux命令格式：command[options][arguments]，command是命令，options是选项，有两种选项--单词和-单字，单字很多都是单字的缩写  
查看命令文档时，[]表示可选的，<>表示可变化的，x|y|z表示只可选择一个的，-abc表示三个参数的混合使用  
帮助命令一共有三种  
	（1）command --help
	（2）whatis command
	（3）man command
4. 执行历史命令：```!n```

### 网络编程知识记录
1. 域名是对于ip地址的一个别名，域名与ip地址的关系存储在域名服务系统（DNS）当中
2. 端口号掌管不同程序的通信

### 疑问点
1. scp在上传的文件如果服务器上有，会直接覆盖么？
2. SQLAlchemy中的relationship究竟是什么东西？*未解决*
3. 为什么用netstat查询开放的端口找到的都不是系统端口，按理说这些端口没有理由不开放啊

### python模块学习
1. argparse学习  
	argparse的作用感觉就是能把命令行中的参数传递进程序里面，并且这些指令和参数应该都是自己定义的，所有的参数感觉都是arparse自己定义的  
	（1）argparse创建的parse会对参数进行跟踪，positional参数是必须有的，optional参数是可有可无的，-h是特殊的  
	（2）当使用optional参数的时候需要为其进行赋值，不然会报错  
	（3）对于参数还可以设定一些action  
	（4）对于optional参数可以使用短命令来代替长命令  
2. PIL学习  
	1.1 Image类，用到了几个函数，可以简单记一下  
	（1）Image对象的open方法：用于载入一个图像文件    
	（2）resize方法：用于重新设置图像的尺寸（像素）  
	2.2 ImageFont模块，主要用到的是```ImageFont.truetype(file, size)```  
	2.3 ImageDraw模块，主要用到的是```drawObject.text(position, string, option)```用来在图片上写点字什么的[看这里](http://blog.csdn.net/dou_co/article/details/17618319)
























